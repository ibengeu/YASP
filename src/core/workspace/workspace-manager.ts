/**\n * Workspace Management System\n * Handles workspace organization, templates, and collaboration features\n */\n\nimport { z } from 'zod';\nimport { OpenApiDocument } from '@/common/openapi-spec';\nimport { WorkspaceSchema } from '@/core/validation/schemas';\n\nexport type WorkspaceType = 'Personal' | 'Team' | 'Partner' | 'Public';\nexport type SyncStatus = 'synced' | 'syncing' | 'offline';\n\nexport interface WorkspaceConfig {\n  id: string;\n  name: string;\n  type: WorkspaceType;\n  description?: string;\n  syncStatus: SyncStatus;\n  tags: string[];\n  isDiscoverable: boolean;\n  createdAt: string;\n  updatedAt: string;\n  settings: WorkspaceSettings;\n  permissions: WorkspacePermissions;\n  stats: WorkspaceStats;\n}\n\nexport interface WorkspaceSettings {\n  theme?: 'light' | 'dark' | 'auto';\n  defaultSortBy?: 'name' | 'recent' | 'version';\n  autoSync?: boolean;\n  enableNotifications?: boolean;\n  maxSpecs?: number;\n  archiveAfterDays?: number;\n  requireApproval?: boolean;\n}\n\nexport interface WorkspacePermissions {\n  canRead: boolean;\n  canWrite: boolean;\n  canDelete: boolean;\n  canShare: boolean;\n  canManage: boolean;\n  allowedDomains?: string[];\n  restrictedPaths?: string[];\n}\n\nexport interface WorkspaceStats {\n  totalSpecs: number;\n  activeSpecs: number;\n  archivedSpecs: number;\n  lastActivity: string;\n  storageUsed: number; // in bytes\n  collaborators?: number;\n}\n\nexport interface WorkspaceTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: 'Basic' | 'REST API' | 'GraphQL' | 'Microservices' | 'E-commerce' | 'Custom';\n  icon: string;\n  config: Partial<WorkspaceConfig>;\n  sampleSpecs?: OpenApiDocument[];\n  tags: string[];\n  isPopular: boolean;\n  usageCount: number;\n}\n\n// Built-in workspace templates\nconst WORKSPACE_TEMPLATES: WorkspaceTemplate[] = [\n  {\n    id: 'personal-basic',\n    name: 'Personal Workspace',\n    description: 'A simple workspace for individual API development',\n    category: 'Basic',\n    icon: 'user',\n    config: {\n      type: 'Personal',\n      isDiscoverable: false,\n      settings: {\n        theme: 'auto',\n        defaultSortBy: 'recent',\n        autoSync: true,\n        maxSpecs: 50,\n        archiveAfterDays: 180\n      },\n      permissions: {\n        canRead: true,\n        canWrite: true,\n        canDelete: true,\n        canShare: false,\n        canManage: true\n      }\n    },\n    tags: ['personal', 'basic'],\n    isPopular: true,\n    usageCount: 0\n  },\n  {\n    id: 'team-collaborative',\n    name: 'Team Workspace',\n    description: 'Collaborative workspace for team API development',\n    category: 'Basic',\n    icon: 'users',\n    config: {\n      type: 'Team',\n      isDiscoverable: true,\n      settings: {\n        theme: 'auto',\n        defaultSortBy: 'recent',\n        autoSync: true,\n        enableNotifications: true,\n        maxSpecs: 200,\n        requireApproval: true\n      },\n      permissions: {\n        canRead: true,\n        canWrite: true,\n        canDelete: false,\n        canShare: true,\n        canManage: false\n      }\n    },\n    tags: ['team', 'collaboration'],\n    isPopular: true,\n    usageCount: 0\n  },\n  {\n    id: 'rest-api-project',\n    name: 'REST API Project',\n    description: 'Optimized for REST API development with common patterns',\n    category: 'REST API',\n    icon: 'api',\n    config: {\n      type: 'Team',\n      tags: ['REST', 'HTTP', 'JSON'],\n      settings: {\n        defaultSortBy: 'name',\n        maxSpecs: 100\n      }\n    },\n    tags: ['rest', 'api', 'http'],\n    isPopular: true,\n    usageCount: 0\n  },\n  {\n    id: 'microservices-suite',\n    name: 'Microservices Suite',\n    description: 'Organize multiple microservice APIs in one workspace',\n    category: 'Microservices',\n    icon: 'layers',\n    config: {\n      type: 'Team',\n      tags: ['microservices', 'distributed', 'services'],\n      settings: {\n        defaultSortBy: 'name',\n        maxSpecs: 500,\n        requireApproval: true\n      }\n    },\n    tags: ['microservices', 'architecture'],\n    isPopular: false,\n    usageCount: 0\n  },\n  {\n    id: 'partner-integration',\n    name: 'Partner Integration',\n    description: 'Workspace for managing partner API integrations',\n    category: 'Basic',\n    icon: 'link',\n    config: {\n      type: 'Partner',\n      isDiscoverable: false,\n      settings: {\n        maxSpecs: 50,\n        requireApproval: true\n      },\n      permissions: {\n        canRead: true,\n        canWrite: false,\n        canDelete: false,\n        canShare: true,\n        canManage: false\n      }\n    },\n    tags: ['partner', 'integration'],\n    isPopular: false,\n    usageCount: 0\n  },\n  {\n    id: 'public-showcase',\n    name: 'Public API Showcase',\n    description: 'Public workspace for showcasing APIs',\n    category: 'Basic',\n    icon: 'globe',\n    config: {\n      type: 'Public',\n      isDiscoverable: true,\n      settings: {\n        maxSpecs: 25,\n        requireApproval: true\n      },\n      permissions: {\n        canRead: true,\n        canWrite: false,\n        canDelete: false,\n        canShare: true,\n        canManage: false\n      }\n    },\n    tags: ['public', 'showcase'],\n    isPopular: false,\n    usageCount: 0\n  }\n];\n\n/**\n * Workspace Manager handles all workspace-related operations\n */\nexport class WorkspaceManager {\n  private static readonly STORAGE_KEY = 'yasp_workspaces';\n  private static readonly CURRENT_WORKSPACE_KEY = 'yasp_current_workspace';\n  \n  /**\n   * Get all available workspace templates\n   */\n  static getTemplates(category?: WorkspaceTemplate['category']): WorkspaceTemplate[] {\n    let templates = [...WORKSPACE_TEMPLATES];\n    \n    if (category) {\n      templates = templates.filter(t => t.category === category);\n    }\n    \n    return templates.sort((a, b) => {\n      // Sort by popularity first, then by usage count\n      if (a.isPopular && !b.isPopular) return -1;\n      if (!a.isPopular && b.isPopular) return 1;\n      return b.usageCount - a.usageCount;\n    });\n  }\n  \n  /**\n   * Get template by ID\n   */\n  static getTemplate(id: string): WorkspaceTemplate | null {\n    return WORKSPACE_TEMPLATES.find(t => t.id === id) || null;\n  }\n  \n  /**\n   * Create workspace from template\n   */\n  static createFromTemplate(templateId: string, name: string, customConfig?: Partial<WorkspaceConfig>): WorkspaceConfig {\n    const template = this.getTemplate(templateId);\n    if (!template) {\n      throw new Error('Template not found');\n    }\n    \n    const config: WorkspaceConfig = {\n      id: this.generateId(),\n      name: name.trim(),\n      type: template.config.type || 'Personal',\n      description: customConfig?.description || template.description,\n      syncStatus: 'synced',\n      tags: [...(template.config.tags || []), ...(customConfig?.tags || [])],\n      isDiscoverable: template.config.isDiscoverable ?? false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      settings: {\n        theme: 'auto',\n        defaultSortBy: 'recent',\n        autoSync: true,\n        enableNotifications: false,\n        maxSpecs: 100,\n        archiveAfterDays: 180,\n        requireApproval: false,\n        ...template.config.settings,\n        ...customConfig?.settings\n      },\n      permissions: {\n        canRead: true,\n        canWrite: true,\n        canDelete: true,\n        canShare: false,\n        canManage: true,\n        ...template.config.permissions,\n        ...customConfig?.permissions\n      },\n      stats: {\n        totalSpecs: 0,\n        activeSpecs: 0,\n        archivedSpecs: 0,\n        lastActivity: new Date().toISOString(),\n        storageUsed: 0,\n        ...customConfig?.stats\n      }\n    };\n    \n    // Validate the configuration\n    const validation = WorkspaceSchema.safeParse({\n      type: config.type,\n      syncStatus: config.syncStatus,\n      tags: config.tags,\n      isDiscoverable: config.isDiscoverable\n    });\n    \n    if (!validation.success) {\n      throw new Error(`Invalid workspace configuration: ${validation.error.errors[0]?.message}`);\n    }\n    \n    // Update template usage count\n    template.usageCount++;\n    \n    return config;\n  }\n  \n  /**\n   * Create custom workspace\n   */\n  static createCustom(config: Partial<WorkspaceConfig> & { name: string }): WorkspaceConfig {\n    return {\n      id: this.generateId(),\n      type: 'Personal',\n      syncStatus: 'synced',\n      tags: [],\n      isDiscoverable: false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      settings: {\n        theme: 'auto',\n        defaultSortBy: 'recent',\n        autoSync: true,\n        enableNotifications: false,\n        maxSpecs: 100,\n        archiveAfterDays: 180,\n        requireApproval: false\n      },\n      permissions: {\n        canRead: true,\n        canWrite: true,\n        canDelete: true,\n        canShare: false,\n        canManage: true\n      },\n      stats: {\n        totalSpecs: 0,\n        activeSpecs: 0,\n        archivedSpecs: 0,\n        lastActivity: new Date().toISOString(),\n        storageUsed: 0\n      },\n      ...config\n    };\n  }\n  \n  /**\n   * Save workspace to localStorage\n   */\n  static saveWorkspace(workspace: WorkspaceConfig): void {\n    const workspaces = this.getAllWorkspaces();\n    const existingIndex = workspaces.findIndex(w => w.id === workspace.id);\n    \n    workspace.updatedAt = new Date().toISOString();\n    \n    if (existingIndex >= 0) {\n      workspaces[existingIndex] = workspace;\n    } else {\n      workspaces.push(workspace);\n    }\n    \n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(workspaces));\n  }\n  \n  /**\n   * Get all workspaces from localStorage\n   */\n  static getAllWorkspaces(): WorkspaceConfig[] {\n    try {\n      const stored = localStorage.getItem(this.STORAGE_KEY);\n      return stored ? JSON.parse(stored) : [];\n    } catch {\n      return [];\n    }\n  }\n  \n  /**\n   * Get workspace by ID\n   */\n  static getWorkspace(id: string): WorkspaceConfig | null {\n    const workspaces = this.getAllWorkspaces();\n    return workspaces.find(w => w.id === id) || null;\n  }\n  \n  /**\n   * Delete workspace\n   */\n  static deleteWorkspace(id: string): boolean {\n    const workspaces = this.getAllWorkspaces();\n    const filtered = workspaces.filter(w => w.id !== id);\n    \n    if (filtered.length === workspaces.length) {\n      return false; // Workspace not found\n    }\n    \n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filtered));\n    \n    // Clear current workspace if it was deleted\n    if (this.getCurrentWorkspaceId() === id) {\n      this.setCurrentWorkspace(null);\n    }\n    \n    return true;\n  }\n  \n  /**\n   * Update workspace statistics\n   */\n  static updateStats(workspaceId: string, stats: Partial<WorkspaceStats>): void {\n    const workspace = this.getWorkspace(workspaceId);\n    if (!workspace) return;\n    \n    workspace.stats = {\n      ...workspace.stats,\n      ...stats,\n      lastActivity: new Date().toISOString()\n    };\n    \n    this.saveWorkspace(workspace);\n  }\n  \n  /**\n   * Set current active workspace\n   */\n  static setCurrentWorkspace(workspaceId: string | null): void {\n    if (workspaceId) {\n      localStorage.setItem(this.CURRENT_WORKSPACE_KEY, workspaceId);\n    } else {\n      localStorage.removeItem(this.CURRENT_WORKSPACE_KEY);\n    }\n  }\n  \n  /**\n   * Get current active workspace ID\n   */\n  static getCurrentWorkspaceId(): string | null {\n    return localStorage.getItem(this.CURRENT_WORKSPACE_KEY);\n  }\n  \n  /**\n   * Get current active workspace\n   */\n  static getCurrentWorkspace(): WorkspaceConfig | null {\n    const id = this.getCurrentWorkspaceId();\n    return id ? this.getWorkspace(id) : null;\n  }\n  \n  /**\n   * Filter workspaces by criteria\n   */\n  static filterWorkspaces(criteria: {\n    type?: WorkspaceType;\n    tags?: string[];\n    isDiscoverable?: boolean;\n    search?: string;\n  }): WorkspaceConfig[] {\n    let workspaces = this.getAllWorkspaces();\n    \n    if (criteria.type) {\n      workspaces = workspaces.filter(w => w.type === criteria.type);\n    }\n    \n    if (criteria.isDiscoverable !== undefined) {\n      workspaces = workspaces.filter(w => w.isDiscoverable === criteria.isDiscoverable);\n    }\n    \n    if (criteria.tags && criteria.tags.length > 0) {\n      workspaces = workspaces.filter(w => \n        criteria.tags!.every(tag => \n          w.tags.some(wTag => wTag.toLowerCase().includes(tag.toLowerCase()))\n        )\n      );\n    }\n    \n    if (criteria.search) {\n      const search = criteria.search.toLowerCase();\n      workspaces = workspaces.filter(w => \n        w.name.toLowerCase().includes(search) ||\n        (w.description?.toLowerCase() || '').includes(search) ||\n        w.tags.some(tag => tag.toLowerCase().includes(search))\n      );\n    }\n    \n    return workspaces;\n  }\n  \n  /**\n   * Export workspace configuration\n   */\n  static exportWorkspace(workspaceId: string): string {\n    const workspace = this.getWorkspace(workspaceId);\n    if (!workspace) {\n      throw new Error('Workspace not found');\n    }\n    \n    return JSON.stringify(workspace, null, 2);\n  }\n  \n  /**\n   * Import workspace configuration\n   */\n  static importWorkspace(configJson: string): WorkspaceConfig {\n    try {\n      const config = JSON.parse(configJson);\n      \n      // Generate new ID to avoid conflicts\n      config.id = this.generateId();\n      config.createdAt = new Date().toISOString();\n      config.updatedAt = new Date().toISOString();\n      \n      // Reset stats\n      config.stats = {\n        totalSpecs: 0,\n        activeSpecs: 0,\n        archivedSpecs: 0,\n        lastActivity: new Date().toISOString(),\n        storageUsed: 0\n      };\n      \n      this.saveWorkspace(config);\n      return config;\n    } catch (error) {\n      throw new Error('Invalid workspace configuration format');\n    }\n  }\n  \n  /**\n   * Generate unique workspace ID\n   */\n  private static generateId(): string {\n    return `workspace_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  /**\n   * Validate workspace permissions\n   */\n  static canPerformAction(workspaceId: string, action: keyof WorkspacePermissions): boolean {\n    const workspace = this.getWorkspace(workspaceId);\n    if (!workspace) return false;\n    \n    return workspace.permissions[action] === true;\n  }\n  \n  /**\n   * Get workspace usage statistics\n   */\n  static getGlobalStats(): {\n    totalWorkspaces: number;\n    workspacesByType: Record<WorkspaceType, number>;\n    totalSpecs: number;\n    mostActiveWorkspace?: string;\n  } {\n    const workspaces = this.getAllWorkspaces();\n    \n    const stats = {\n      totalWorkspaces: workspaces.length,\n      workspacesByType: {\n        Personal: 0,\n        Team: 0,\n        Partner: 0,\n        Public: 0\n      } as Record<WorkspaceType, number>,\n      totalSpecs: 0,\n      mostActiveWorkspace: undefined as string | undefined\n    };\n    \n    let mostActiveCount = 0;\n    \n    workspaces.forEach(workspace => {\n      stats.workspacesByType[workspace.type]++;\n      stats.totalSpecs += workspace.stats.totalSpecs;\n      \n      if (workspace.stats.totalSpecs > mostActiveCount) {\n        mostActiveCount = workspace.stats.totalSpecs;\n        stats.mostActiveWorkspace = workspace.name;\n      }\n    });\n    \n    return stats;\n  }\n}\n\nexport default WorkspaceManager;